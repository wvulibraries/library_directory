version: 2
jobs:
  build:
    parallelism: 1  # however many CPUs you need/pay for
    
    #############################################
    # Container Setup
    #############################################
    docker:
      - image: circleci/ruby:2.6-node-browsers
        environment:
          - RAILS_ENV=test
          - CC_TEST_REPORTER_ID=168bb7cbd2eea60f133f998d851a10822f44eeb06a04bc2b71cec411ba2bb3ba
          - COVERAGE=true          
      - image: circleci/mysql:5.7
        environment:
          - MYSQL_ROOT_HOST=%
          - MYSQL_ROOT_PASSWORD=circleci
      - image: elasticsearch:6.6.2
        environment:
          - discovery.type=single-node      
    
    #############################################
    # Build Steps
    #############################################
    steps:
      - checkout
      - run:
          name: Configure secrets.yml
          command: mv config/secrets.ci.yml config/secrets.yml
      - run:
          name: Configure database.yml
          command: mv config/database.ci.yml config/database.yml

      ###########################################
      # Bundler w/ caching
      ###########################################
      - restore_cache:
          keys:
            - rails-bundle-{{ checksum "Gemfile.lock" }}
            - rails-bundle-
      - run:
          name: Bundle Gems
          command: bundle check --path=vendor/bundle || bundle install --path=vendor/bundle
      - save_cache:
          key: rails-bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      ###########################################
      # Code Climate
      ###########################################
      - run:
          name: Install Code Climate Test Reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter            

      ###########################################
      # Database
      ###########################################
      - run:
          name: Wait for MySQL
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 1m
      - run:
          name: Load DB schema
          command: bin/rails db:schema:load --trace

      ###########################################
      # Run rspec in parallel
      ###########################################
      - run:
          name: Run rspec in parallel
          command: |
            mkdir -p test_results
            ./cc-test-reporter before-build
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out test_results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
      - run:
          name: Code Climate Test Coverage
          command: |
            ./cc-test-reporter format-coverage -t simplecov -o "coverage/codeclimate.$CIRCLE_NODE_INDEX.json"    

      # Save test results for timing analysis
      - store_test_results:
          path: test_results
      - deploy:
          command: |
            ./cc-test-reporter sum-coverage --output - coverage/codeclimate.*.json | ./cc-test-reporter upload-coverage --debug --input -          