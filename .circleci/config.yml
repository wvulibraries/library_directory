# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    environment:
      CC_TEST_REPORTER_ID: de4e83be2764daa72e88022fb8e2ff596aa8fc1074c93e533fedafb00bb62805
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.5.3-node-browsers
        environment:
          RAILS_ENV: test
          SECRET_KEY_BASE: testing
          DATABASE_PASSWORD: testpass
          ELASTICSEARCH_URL: http://elasticsearch:9200
      - image: mysql:5.7.25
        environment:
          MYSQL_ROOT_PASSWORD: testpass
      - image: elasticsearch:6.6.0

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/library-directory

    steps:
      - checkout

      # Restore Cached Dependencies
      - type: cache-restore
        name: Restore bundle cache
        key: library-directory-{{ checksum "Gemfile.lock" }}

      # Bundle install dependencies
      - run: bundle install --path vendor/bundle

      # Cache Dependencies
      - type: cache-save
        name: Store bundle cache
        key: library-directory-{{ checksum "Gemfile.lock" }}
        paths:
          - vendor/bundle

      # Wait for DB
      - run:
          name: Waiting for MySQL
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 120s
      
      # Code Climate Tests
      - run:
          name: Install Code Climate Test Reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter

      # Setup the database
      - run: 
          name: Setup the Database
          command: bundle exec rake db:setup

      # Run the tests
      - run:
          name: Test the app yo! 
          command: | 
            ./cc-test-reporter before-build
            bundle exec rspec
            /cc-test-reporter after-build --coverage-input-type clover --exit-code $?


      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results